name: Release flow on tag push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: iwa/domain-expiry-watcher

on:
  push:
    tags:
      - '*'

jobs:
  build_binary:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5.5.0
      with:
        go-version: '1.24'

    - name: Build
      run: CGO_ENABLED=0 GOOS=linux go build -o domain-expiry-watcher-linux-x86 ./cmd/domain-expiry-watcher/main.go

    - name: Upload binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-linux-binary
        path: ./domain-expiry-watcher-linux-x86

  build_docker:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3.4.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v6.18.0
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.VERSION }}

  release:
    needs: [build_binary, build_docker]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux binary artifact
        uses: actions/download-artifact@v4
        with:
          name: app-linux-binary
          path: ./binary

      - name: Get second-to-last tag
        id: get_second_last_tag
        run: |
          # Get all tags sorted by creation order
          TAGS=$(git tag --sort=-creatordate)
          SECOND_LAST_TAG=$(echo "$TAGS" | sed -n 2p) # Get the second tag

          if [ -z "$SECOND_LAST_TAG" ]; then
            echo "No second-to-last tag found. Falling back to all commits."
            SECOND_LAST_TAG="NONE"
          fi

          echo "second_last_tag=${SECOND_LAST_TAG}" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          if [ "$second_last_tag" = "NONE" ]; then
            echo "No tags found. Generating changelog for all commits."
            git log --pretty=format:"- %h %s" > CHANGELOG.md
          else
            echo "Generating changelog from second-to-last tag: $second_last_tag"
            git log $second_last_tag..HEAD --pretty=format:"- %h %s" > CHANGELOG.md
          fi

      - name: Create draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${GITHUB_REF#refs/tags/}"

          gh release create "$tag" \
            --title="$tag" \
            --notes-file CHANGELOG.md \
            --draft

      - name: Upload Linux binary to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          gh release upload "$tag" ./binary/domain-expiry-watcher-linux-x86
